package minipro;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class ATM extends JFrame implements ActionListener {
    private CardLayout cardLayout;
    private JPanel mainPanel;

    private JPasswordField pinField;
    private JLabel loginMessage;

    private double balance;
    private JLabel balanceLabel;

    private Connection conn;
    private String currentPIN;

    public ATM() {
        setTitle("💳 Smart ATM Simulator");
        setSize(1200, 750); // smaller screen size (was fullscreen)
        setLocationRelativeTo(null); // ✅ centers the frame perfectly
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);

        connectDB();

        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);

        mainPanel.add(createLoginPanel(), "Login");
        mainPanel.add(createATMPanel(), "ATM");

        add(mainPanel);
        setVisible(true);
    }

    // ---------- DB CONNECTION ----------
    private void connectDB() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/atm_db?useSSL=false&serverTimezone=UTC",
                    "root", "A@sh33n12#"
            );
            System.out.println("✅ Database Connected");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "DB Connection failed: " + e.getMessage(),
                    "DB Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    // ---------- LOGIN PANEL ----------
    private JPanel createLoginPanel() {
        JPanel panel = new JPanel(null) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2 = (Graphics2D) g;
                GradientPaint gp = new GradientPaint(0, 0, new Color(150, 210, 255),
                        getWidth(), getHeight(), new Color(220, 245, 255));
                g2.setPaint(gp);
                g2.fillRect(0, 0, getWidth(), getHeight());
            }
        };

        JLabel title = new JLabel("💳 Welcome to Smart ATM Simulator", JLabel.CENTER);
        title.setFont(new Font("Segoe UI", Font.BOLD, 42));
        title.setForeground(new Color(40, 40, 80));
        title.setBounds(0, 100, 1200, 60); // adjusted width
        panel.add(title);

        JLabel pinLabel = new JLabel("Enter PIN:");
        pinLabel.setFont(new Font("Verdana", Font.PLAIN, 24));
        pinLabel.setBounds(480, 320, 150, 40);
        panel.add(pinLabel);

        pinField = new JPasswordField();
        pinField.setBounds(650, 320, 200, 40);
        pinField.setFont(new Font("Consolas", Font.BOLD, 22));
        pinField.setHorizontalAlignment(JTextField.CENTER);
        panel.add(pinField);

        JButton loginBtn = createStyledButton("Login", new Color(50, 130, 200));
        loginBtn.setBounds(600, 400, 150, 50);
        panel.add(loginBtn);

        loginMessage = new JLabel("", JLabel.CENTER);
        loginMessage.setFont(new Font("Comic Sans MS", Font.PLAIN, 18));
        loginMessage.setBounds(400, 480, 500, 40);
        loginMessage.setForeground(Color.RED);
        panel.add(loginMessage);

        return panel;
    }

    // ---------- ATM MAIN PANEL ----------
    private JPanel createATMPanel() {
        JPanel panel = new JPanel(null) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                GradientPaint gp = new GradientPaint(0, 0,
                        new Color(230, 250, 240), getWidth(), getHeight(), new Color(210, 240, 230));
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, getWidth(), getHeight());
            }
        };

        JLabel title = new JLabel("🏧 ATM Main Menu", JLabel.CENTER);
        title.setFont(new Font("Segoe UI", Font.BOLD, 44));
        title.setForeground(new Color(40, 60, 90));
        title.setBounds(0, 80, 1200, 60);
        panel.add(title);

        balanceLabel = new JLabel("Current Balance: ₹0", JLabel.CENTER);
        balanceLabel.setFont(new Font("Comic Sans MS", Font.BOLD, 26));
        balanceLabel.setForeground(Color.DARK_GRAY);
        balanceLabel.setBounds(0, 160, 1200, 40);
        panel.add(balanceLabel);

        // ✅ Center all buttons
        int centerX = 475; // adjusted for new window size
        int width = 250;
        int height = 50;
        int gap = 70;
        int y = 260;

        JButton checkBtn = createStyledButton("Check Balance", new Color(72, 61, 139));
        checkBtn.setBounds(centerX, y, width, height);
        panel.add(checkBtn);

        JButton depositBtn = createStyledButton("Deposit", new Color(46, 139, 87));
        depositBtn.setBounds(centerX, y += gap, width, height);
        panel.add(depositBtn);

        JButton withdrawBtn = createStyledButton("Withdraw", new Color(255, 165, 0));
        withdrawBtn.setBounds(centerX, y += gap, width, height);
        panel.add(withdrawBtn);

        JButton viewTxBtn = createStyledButton("View Transactions", new Color(70, 130, 180));
        viewTxBtn.setBounds(centerX, y += gap, width, height);
        panel.add(viewTxBtn);

        JButton backBtn = createStyledButton("Back to Login", new Color(139, 0, 0));
        backBtn.setBounds(centerX, y += gap, width, height);
        panel.add(backBtn);

        JButton exitBtn = createStyledButton("Exit", new Color(178, 34, 34));
        exitBtn.setBounds(centerX, y += gap, width, height);
        panel.add(exitBtn);

        return panel;
    }

    private JButton createStyledButton(String text, Color bg) {
        JButton b = new JButton(text);
        b.setFont(new Font("Verdana", Font.BOLD, 18));
        b.setForeground(Color.WHITE);
        b.setBackground(bg);
        b.setFocusPainted(false);
        b.setCursor(new Cursor(Cursor.HAND_CURSOR));
        b.setOpaque(true);
        b.setBorder(BorderFactory.createEmptyBorder(5, 15, 5, 15));
        b.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) { b.setBackground(bg.darker()); }
            public void mouseExited(MouseEvent e) { b.setBackground(bg); }
        });
        b.addActionListener(this);
        return b;
    }

    // ---------- ACTIONS ----------
    @Override
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();

        try {
            if ("Login".equals(cmd)) {
                currentPIN = new String(pinField.getPassword()).trim();
                if (currentPIN.isEmpty()) {
                    loginMessage.setText("Enter PIN");
                    return;
                }
                PreparedStatement pst = conn.prepareStatement("SELECT balance FROM users WHERE pin = ?");
                pst.setString(1, currentPIN);
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    balance = rs.getDouble("balance");
                    balanceLabel.setText("Current Balance: ₹" + String.format("%.2f", balance));
                    loginMessage.setText("");
                    cardLayout.show(mainPanel, "ATM");
                } else {
                    loginMessage.setText("❌ Invalid PIN!");
                }
                rs.close();
                pst.close();
            } else if ("Check Balance".equals(cmd)) {
                JOptionPane.showMessageDialog(this,
                        "💰 Your balance is ₹" + String.format("%.2f", balance),
                        "Balance", JOptionPane.INFORMATION_MESSAGE);
            } else if ("Deposit".equals(cmd)) {
                String input = JOptionPane.showInputDialog(this, "Enter amount to deposit:");
                if (input != null) {
                    double amt = Double.parseDouble(input);
                    if (amt > 0) {
                        balance += amt;
                        recordTransaction("Deposit", amt);
                        JOptionPane.showMessageDialog(this, "✅ Deposited ₹" + String.format("%.2f", amt));
                        balanceLabel.setText("Current Balance: ₹" + String.format("%.2f", balance));
                        updateBalanceInDB();
                    } else {
                        JOptionPane.showMessageDialog(this, "Enter positive amount", "Invalid", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else if ("Withdraw".equals(cmd)) {
                String input = JOptionPane.showInputDialog(this, "Enter amount to withdraw:");
                if (input != null) {
                    double amt = Double.parseDouble(input);
                    if (amt > 0 && amt <= balance) {
                        balance -= amt;
                        recordTransaction("Withdraw", amt);
                        JOptionPane.showMessageDialog(this, "✅ Withdrawn ₹" + String.format("%.2f", amt));
                        balanceLabel.setText("Current Balance: ₹" + String.format("%.2f", balance));
                        updateBalanceInDB();
                    } else {
                        JOptionPane.showMessageDialog(this, "Insufficient funds or invalid amount", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else if ("View Transactions".equals(cmd)) {
                showTransactionsDialog();
            } else if ("Back to Login".equals(cmd)) {
                pinField.setText("");
                cardLayout.show(mainPanel, "Login");
            } else if ("Exit".equals(cmd)) {
                JOptionPane.showMessageDialog(this, "👋 Thank you for using Smart ATM!");
                System.exit(0);
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateBalanceInDB() throws SQLException {
        PreparedStatement pst = conn.prepareStatement("UPDATE users SET balance = ? WHERE pin = ?");
        pst.setDouble(1, balance);
        pst.setString(2, currentPIN);
        pst.executeUpdate();
        pst.close();
    }

    private void recordTransaction(String type, double amt) throws SQLException {
        PreparedStatement pst = conn.prepareStatement("INSERT INTO transactions(pin, type, amount) VALUES (?, ?, ?)");
        pst.setString(1, currentPIN);
        pst.setString(2, type);
        pst.setDouble(3, amt);
        pst.executeUpdate();
        pst.close();
    }

    private void showTransactionsDialog() throws SQLException {
        PreparedStatement pst = conn.prepareStatement("SELECT id, type, amount, date FROM transactions WHERE pin = ? ORDER BY date DESC LIMIT 50");
        pst.setString(1, currentPIN);
        ResultSet rs = pst.executeQuery();

        String[] cols = {"ID", "Type", "Amount", "Date"};
        DefaultTableModel model = new DefaultTableModel(cols, 0);
        while (rs.next()) {
            Object[] row = {
                    rs.getInt("id"),
                    rs.getString("type"),
                    String.format("₹%.2f", rs.getDouble("amount")),
                    rs.getTimestamp("date").toString()
            };
            model.addRow(row);
        }
        rs.close();
        pst.close();

        JTable table = new JTable(model);
        JScrollPane sp = new JScrollPane(table);
        sp.setPreferredSize(new Dimension(700, 400));
        JOptionPane.showMessageDialog(this, sp, "📜 Transactions for PIN: " + currentPIN, JOptionPane.PLAIN_MESSAGE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(ATM::new);
    }
}
